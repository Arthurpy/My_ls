d_type = tipe de fichier 
nlink sur stat
faire strcat pour lier 2 str a la suite 








struct stat {
               dev_t     st_dev;         /* ID of device containing file */
               ino_t     st_ino;         /* Inode number */
               mode_t    st_mode;        /* File type and mode */
               nlink_t   st_nlink;       /* Number of hard links */
               uid_t     st_uid;         /* User ID of owner */
               gid_t     st_gid;         /* Group ID of owner */
               dev_t     st_rdev;        /* Device ID (if special file) */
               off_t     st_size;        /* Total size, in bytes */
               blkcnt_t  st_blocks;      /* Number of 512B blocks allocated */

               struct timespec st_atim;  /* Time of last access */
               struct timespec st_mtim;  /* Time of last modification */
               struct timespec st_ctim;  /* Time of last status change */
    };

    st_mode > octal to letter
    





int choose_flag(char *path)
{
    DIR *dir = opendir(path);
    struct dirent *directory = NULL;
    int i = 0;

    while (path[i] != '\0') {
        if (path[i] == 'R'){
            flags_R(dir, directory);
        } else {
            i++;
        }
    }
    closedir(dir);
    return 0;
}

int flags_R(DIR *dir, struct dirent *directory)
{
    while ((directory = readdir(dir)) != NULL) {
        if (directory->d_name[0] != '.') {
            check_perm(dir);
            my_putstr(directory->d_name);
            if (directory->d_type == )
            {
                /* code */
            }
            
            my_putchar('\n');
        }
    }
    my_putchar('\n');
    return (0);
}

int check_perm(DIR *dir, char *str)
{
    struct stat perm;
    stat(".", &perm); 
    my_put_nbr(perm.st_mode);
    return 0;
}

int main (int argc, char **argv)
{
    char *chec = argv[1];
    int i = 1;
    if (argc <= 1){
        my_ls("./");
        return 0;
    } else if (argv[i] != '-'){
        char *str = argv[i];
        while (i < argc)
        {
            if (argc > 2){
                my_putstr(argv[i]);
                my_putstr(":\n");
            }
            my_ls(argv[i]);
            i++;
        }
    } else {
        while (i =! argc)
        {
            choose_flag(argv[i]);
            i++;
        }
        
    
    return (0);
    }
}